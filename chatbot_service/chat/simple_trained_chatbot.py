# filepath: /Users/hnam/Desktop/K√¨ 2 nƒÉm 4/Ki·∫øn tr√∫c v√† thi·∫øt k·∫ø ph·∫ßn m√™m/healthcare-microservices/chatbot_service/chat/simple_trained_chatbot.py
import re
import json
import numpy as np
import pandas as pd
import os
import logging
import random
from datetime import datetime, timedelta
import requests

# Try to import JWT for token generation
try:
    import jwt
    JWT_AVAILABLE = True
except ImportError:
    JWT_AVAILABLE = False

# Try to import Vietnamese text processing
try:
    from pyvi import ViTokenizer
    PYVI_AVAILABLE = True
except ImportError:
    PYVI_AVAILABLE = False

# Try to import TensorFlow/Keras
try:
    import tensorflow as tf
    from tensorflow import keras
    TENSORFLOW_AVAILABLE = True
except ImportError:
    TENSORFLOW_AVAILABLE = False

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleTrainedHealthcareChatBot:
    def __init__(self):
        self.base_dir = os.path.dirname(__file__)
        self.model_loaded = False
        self.tensorflow_available = TENSORFLOW_AVAILABLE
        self.conversation_context = {}
        
        # API base URLs - Use Docker service names in container environment
        docker_env = os.getenv("DOCKER_ENV", "false").lower()
        logger.info(f"üê≥ Docker environment: {docker_env}")
        
        if docker_env == "true":
            # Running in Docker - use service names
            self.user_service_url = os.getenv("USER_SERVICE_URL", "http://userservice:8001")
            self.appointment_service_url = os.getenv("APPOINTMENT_SERVICE_URL", "http://appointmentservice:8002")
            self.gateway_url = os.getenv("GATEWAY_URL", "http://gateway:8000")
            logger.info("üö¢ Using Docker service names for API URLs")
        else:
            # Running locally - use localhost
            self.user_service_url = "http://localhost:8001"
            self.appointment_service_url = "http://localhost:8002"
            self.gateway_url = "http://localhost:8000"
            logger.info("üè† Using localhost for API URLs")
        
        logger.info(f"üì° API URLs configured:")
        logger.info(f"  User Service: {self.user_service_url}")
        logger.info(f"  Appointment Service: {self.appointment_service_url}")
        logger.info(f"  Gateway: {self.gateway_url}")
        
        # Generate a service token for chatbot API calls
        self.service_token = self.generate_service_token()
        
        # Vietnamese stopwords
        self.stopwords = []
        try:
            stopwords_path = os.path.join(self.base_dir, "..", "vietnamese-stopwords.txt")
            with open(stopwords_path, 'r', encoding='utf-8') as f:
                self.stopwords = f.read().splitlines()
                self.stopwords = [i for i in self.stopwords if i.find(" ") == -1]
        except Exception as e:
            logger.warning(f"Could not load Vietnamese stopwords: {e}")
        
        # Appointment booking states
        self.APPOINTMENT_STATES = {
            'INIT': 'init',
            'SELECTING_DOCTOR': 'selecting_doctor',
            'SELECTING_DATE': 'selecting_date',
            'SELECTING_TIME': 'selecting_time',
            'ENTERING_REASON': 'entering_reason',
            'CONFIRMING': 'confirming',
            'COMPLETED': 'completed'
        }
        
        # Predefined responses for common healthcare questions
        self.predefined_responses = {
            'greeting': [
                "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω y t·∫ø ·∫£o. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒëi·ªÅu g√¨?",
                "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe.",
                "Xin ch√†o! B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ g√¨?"
            ],
            'headache': [
                "ƒêau ƒë·∫ßu c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n. B·∫°n c√≥ th·ªÉ th·ª≠ ngh·ªâ ng∆°i trong ph√≤ng t·ªëi, u·ªëng n∆∞·ªõc ƒë·ªß v√† massage nh·∫π v√πng th√°i d∆∞∆°ng.",
                "ƒê·ªÉ gi·∫£m ƒëau ƒë·∫ßu, b·∫°n n√™n tr√°nh cƒÉng th·∫≥ng, ng·ªß ƒë·ªß gi·∫•c v√† c√≥ th·ªÉ d√πng thu·ªëc gi·∫£m ƒëau theo ch·ªâ d·∫´n.",
                "ƒêau ƒë·∫ßu th∆∞·ªùng xuy√™n c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra b·ªüi b√°c sƒ©. B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch h·∫πn kh√¥ng?"
            ],
            'fever': [
                "S·ªët c√≥ th·ªÉ l√† d·∫•u hi·ªáu c∆° th·ªÉ ƒëang ch·ªëng l·∫°i nhi·ªÖm tr√πng. H√£y ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc v√† theo d√µi nhi·ªát ƒë·ªô.",
                "N·∫øu s·ªët tr√™n 38.5¬∞C ho·∫∑c k√©o d√†i, b·∫°n n√™n ƒë·∫øn g·∫∑p b√°c sƒ© ngay.",
                "C√≥ th·ªÉ d√πng thu·ªëc h·∫° s·ªët theo ch·ªâ d·∫´n v√† ch∆∞·ªùm m√°t ƒë·ªÉ gi·∫£m nhi·ªát ƒë·ªô c∆° th·ªÉ."
            ],
            'appointment': [
                "T√¥i s·∫Ω gi√∫p b·∫°n ƒë·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ©. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch ch·ªçn b√°c sƒ© b·∫°n mu·ªën kh√°m.",
                "ƒê·ªÉ ƒë·∫∑t l·ªãch h·∫πn, tr∆∞·ªõc ti√™n b·∫°n c·∫ßn ch·ªçn b√°c sƒ©. T√¥i s·∫Ω hi·ªÉn th·ªã danh s√°ch b√°c sƒ© c√≥ s·∫µn.",
                "Ch√∫ng ta b·∫Øt ƒë·∫ßu ƒë·∫∑t l·ªãch kh√°m nh√©! ƒê·∫ßu ti√™n, b·∫°n mu·ªën kh√°m v·ªõi chuy√™n khoa n√†o?"
            ],
            'thanks': [
                "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! Ch√∫c b·∫°n s·ª©c kh·ªèe t·ªët.",
                "Kh√¥ng c√≥ g√¨! H√£y chƒÉm s√≥c s·ª©c kh·ªèe v√† li√™n h·ªá khi c·∫ßn thi·∫øt.",
                "C·∫£m ∆°n b·∫°n! ƒê·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá n·∫øu c√≥ th√™m c√¢u h·ªèi."
            ],
            'default': [
                "T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe n√†y. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ c·ª• th·ªÉ h∆°n kh√¥ng?",
                "ƒê√¢y l√† v·∫•n ƒë·ªÅ y t·∫ø c·∫ßn ƒë∆∞·ª£c t∆∞ v·∫•n c·∫©n th·∫≠n. T√¥i khuy·∫øn ngh·ªã b·∫°n n√™n g·∫∑p b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c th√°m kh√°m.",
                "V·ªÅ v·∫•n ƒë·ªÅ n√†y, t·ªët nh·∫•t b·∫°n n√™n ƒë·∫∑t l·ªãch h·∫πn v·ªõi b√°c sƒ© chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c."
            ]
        }
        
        # Try to load the trained model
        self.load_model()
    
    def load_model(self):
        """Load the trained TensorFlow model"""
        try:
            if not TENSORFLOW_AVAILABLE:
                logger.warning("TensorFlow not available, using predefined responses")
                self.model_loaded = False
                return
            
            model_path = os.path.join(self.base_dir, "..", "training_model.h5")
            if os.path.exists(model_path):
                # For now, just mark as loaded without actually loading to avoid complexity
                logger.info("Model file found, using hybrid approach")
                self.model_loaded = True
            else:
                logger.warning(f"Model file not found at {model_path}")
                self.model_loaded = False
                
        except Exception as e:
            logger.error(f"Error loading model: {str(e)}")
            self.model_loaded = False
    
    def clean_text(self, text):
        """Clean and preprocess text"""
        if not text:
            return ""
        
        # Convert to lowercase
        text = text.lower()
        
        # Remove extra whitespaces
        text = re.sub(r'\s+', ' ', text).strip()
        
        # Remove special characters but keep Vietnamese characters
        text = re.sub(r'[^\w\s√†√°√£·∫°·∫£ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªÉ·ªÖ·ªáƒë√¨√≠ƒ©·ªâ·ªã√≤√≥√µ·ªç·ªè√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫≈©·ª•·ªß∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ªπ·ª∑·ªµ]', '', text)
        
        return text
    
    def detect_intent(self, user_input):
        """Detect user intent based on keywords"""
        cleaned_input = self.clean_text(user_input)
        
        # Greeting patterns
        greeting_keywords = ['xin ch√†o', 'ch√†o', 'hello', 'hi', 'ch√†o b·∫°n']
        if any(keyword in cleaned_input for keyword in greeting_keywords):
            return 'greeting'
        
        # Headache patterns
        headache_keywords = ['ƒëau ƒë·∫ßu', 'nh·ª©c ƒë·∫ßu', 'ƒëau n·ª≠a ƒë·∫ßu', 'migraine']
        if any(keyword in cleaned_input for keyword in headache_keywords):
            return 'headache'
        
        # Fever patterns
        fever_keywords = ['s·ªët', 'n√≥ng ng∆∞·ªùi', 'c√≥ s·ªët', 'b·ªã s·ªët']
        if any(keyword in cleaned_input for keyword in fever_keywords):
            return 'fever'
        
        # Appointment patterns
        appointment_keywords = ['ƒë·∫∑t l·ªãch', 'h·∫πn b√°c sƒ©', 'kh√°m b·ªánh', 'ƒëƒÉng k√Ω kh√°m']
        if any(keyword in cleaned_input for keyword in appointment_keywords):
            return 'appointment'
        
        # Thanks patterns
        thanks_keywords = ['c·∫£m ∆°n', 'c√°m ∆°n', 'thanks', 'thank you', 'tks']
        if any(keyword in cleaned_input for keyword in thanks_keywords):
            return 'thanks'
        
        return 'default'
    
    def get_response(self, user_input, session_id=None, user_token=None):
        """Get response for user input with interactive appointment booking"""
        try:
            # Clean user input
            cleaned_input = self.clean_text(user_input)
            
            if not cleaned_input:
                return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?"
            
            # Initialize session context if not exists
            if session_id and session_id not in self.conversation_context:
                self.conversation_context[session_id] = {
                    'appointment_state': None,
                    'appointment_data': {},
                    'conversation_history': [],
                    'user_token': user_token
                }
            
            # Update user token in session if provided
            if session_id and user_token:
                self.conversation_context[session_id]['user_token'] = user_token
            
            # Get session context
            session_context = self.conversation_context.get(session_id, {})
            appointment_state = session_context.get('appointment_state')
            appointment_data = session_context.get('appointment_data', {})
            
            # Handle appointment booking flow
            if appointment_state:
                return self.handle_appointment_flow(cleaned_input, session_id, appointment_state, appointment_data)
            
            # Detect intent for new conversation
            intent = self.detect_intent(cleaned_input)
            
            # Start appointment booking if requested
            if intent == 'appointment':
                return self.start_appointment_booking(session_id)
            
            # Get appropriate response for other intents
            if intent in self.predefined_responses:
                responses = self.predefined_responses[intent]
                response = random.choice(responses)
            else:
                responses = self.predefined_responses['default']
                response = random.choice(responses)
            
            # Store conversation context
            if session_id:
                self.conversation_context[session_id]['conversation_history'].append({
                    'user': user_input,
                    'bot': response,
                    'intent': intent,
                    'timestamp': datetime.now().isoformat()
                })
            
            return response
            
        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            return "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."
    
    def book_appointment(self, patient_name, phone_number, appointment_date, appointment_time, doctor_specialty, symptoms):
        """Book an appointment"""
        try:
            # Simulate appointment booking
            appointment_data = {
                'patient_name': patient_name,
                'phone_number': phone_number,
                'appointment_date': appointment_date,
                'appointment_time': appointment_time,
                'doctor_specialty': doctor_specialty,
                'symptoms': symptoms,
                'booking_time': datetime.now().isoformat(),
                'status': 'pending'
            }
            
            # In a real implementation, this would save to database
            logger.info(f"Appointment booked: {appointment_data}")
            
            return {
                'success': True,
                'message': f'ƒê√£ ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng cho {patient_name} v√†o {appointment_date} l√∫c {appointment_time}. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá qua s·ªë {phone_number} ƒë·ªÉ x√°c nh·∫≠n.',
                'appointment_id': f'APT{datetime.now().strftime("%Y%m%d%H%M%S")}',
                'data': appointment_data
            }
            
        except Exception as e:
            logger.error(f"Error booking appointment: {str(e)}")
            return {
                'success': False,
                'message': 'ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau.'
            }
    
    def get_conversation_history(self, session_id):
        """Get conversation history for a session"""
        if session_id in self.conversation_context:
            return self.conversation_context[session_id].get('conversation_history', [])
        return []
    
    def clear_conversation(self, session_id):
        """Clear conversation history for a session"""
        if session_id in self.conversation_context:
            self.conversation_context[session_id] = {
                'appointment_state': None,
                'appointment_data': {},
                'conversation_history': []
            }
            return True
        return False
    
    def start_appointment_booking(self, session_id):
        """Start the appointment booking process"""
        try:
            # Check if user is authenticated
            session_context = self.conversation_context.get(session_id, {})
            user_token = session_context.get('user_token')
            
            if not user_token:
                return (
                    "üîê ƒê·ªÉ ƒë·∫∑t l·ªãch kh√°m, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng tr∆∞·ªõc.\n\n"
                    "Vui l√≤ng:\n"
                    "1. ƒêƒÉng nh·∫≠p tr√™n trang web\n"
                    "2. Quay l·∫°i chatbot v√† th·ª≠ ƒë·∫∑t l·ªãch kh√°m\n\n"
                    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi nh·ªØng th√¥ng tin kh√°c nh∆∞ t∆∞ v·∫•n s·ª©c kh·ªèe, "
                    "th√¥ng tin v·ªÅ b·ªánh vi·ªán, ho·∫∑c h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng d·ªãch v·ª•."
                )
            
            # Get list of doctors
            doctors = self.get_doctors_list(user_token)
            
            if not doctors:
                return "Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ b√°c sƒ© n√†o c√≥ s·∫µn. Vui l√≤ng th·ª≠ l·∫°i sau."
            
            # Update session state
            self.conversation_context[session_id]['appointment_state'] = self.APPOINTMENT_STATES['SELECTING_DOCTOR']
            self.conversation_context[session_id]['appointment_data'] = {'doctors': doctors}
            
            # Create doctor list message
            doctor_list = "Danh s√°ch b√°c sƒ© c√≥ s·∫µn:\n\n"
            for i, doctor in enumerate(doctors, 1):
                specialty = doctor.get('specialty', 'ƒêa khoa')
                doctor_list += f"{i}. BS. {doctor['first_name']} {doctor['last_name']} - {specialty}\n"
            
            doctor_list += "\nVui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√°c sƒ© b·∫°n mu·ªën ƒë·∫∑t l·ªãch kh√°m:"
            
            return doctor_list
            
        except Exception as e:
            logger.error(f"Error starting appointment booking: {str(e)}")
            return "Xin l·ªói, kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu quy tr√¨nh ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau."
    
    def handle_appointment_flow(self, user_input, session_id, current_state, appointment_data):
        """Handle the interactive appointment booking flow"""
        try:
            if current_state == self.APPOINTMENT_STATES['SELECTING_DOCTOR']:
                return self.handle_doctor_selection(user_input, session_id, appointment_data)
            
            elif current_state == self.APPOINTMENT_STATES['SELECTING_DATE']:
                return self.handle_date_selection(user_input, session_id, appointment_data)
            
            elif current_state == self.APPOINTMENT_STATES['SELECTING_TIME']:
                return self.handle_time_selection(user_input, session_id, appointment_data)
            
            elif current_state == self.APPOINTMENT_STATES['ENTERING_REASON']:
                return self.handle_reason_entry(user_input, session_id, appointment_data)
            
            elif current_state == self.APPOINTMENT_STATES['CONFIRMING']:
                return self.handle_confirmation(user_input, session_id, appointment_data)
            
            else:
                # Reset state if unknown
                self.conversation_context[session_id]['appointment_state'] = None
                return "ƒê√£ c√≥ l·ªói trong quy tr√¨nh ƒë·∫∑t l·ªãch. H√£y th·ª≠ l·∫°i b·∫±ng c√°ch n√≥i 'ƒë·∫∑t l·ªãch kh√°m'."
                
        except Exception as e:
            logger.error(f"Error in appointment flow: {str(e)}")
            return "ƒê√£ c√≥ l·ªói x·∫£y ra trong quy tr√¨nh ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i."
    
    def handle_doctor_selection(self, user_input, session_id, appointment_data):
        """Handle doctor selection step"""
        try:
            # Try to parse doctor selection
            import re
            numbers = re.findall(r'\d+', user_input)
            
            if not numbers:
                return "Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√°c sƒ© b·∫°n mu·ªën ch·ªçn (v√≠ d·ª•: 1, 2, 3...)."
            
            doctor_index = int(numbers[0]) - 1
            doctors = appointment_data.get('doctors', [])
            
            if doctor_index < 0 or doctor_index >= len(doctors):
                return f"S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn {len(doctors)}."
            
            selected_doctor = doctors[doctor_index]
            
            # Update appointment data
            self.conversation_context[session_id]['appointment_data']['selected_doctor'] = selected_doctor
            self.conversation_context[session_id]['appointment_state'] = self.APPOINTMENT_STATES['SELECTING_DATE']
            
            # Generate date options (next 7 days, excluding weekends)
            date_options = self.generate_date_options()
            self.conversation_context[session_id]['appointment_data']['date_options'] = date_options
            
            response = f"B·∫°n ƒë√£ ch·ªçn BS. {selected_doctor['first_name']} {selected_doctor['last_name']}.\n\n"
            response += "Vui l√≤ng ch·ªçn ng√†y kh√°m:\n\n"
            
            for i, date_option in enumerate(date_options, 1):
                response += f"{i}. {date_option['display']} ({date_option['weekday']})\n"
            
            response += "\nVui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± ng√†y b·∫°n mu·ªën kh√°m:"
            
            return response
            
        except Exception as e:
            logger.error(f"Error in doctor selection: {str(e)}")
            return "ƒê√£ c√≥ l·ªói khi ch·ªçn b√°c sƒ©. Vui l√≤ng th·ª≠ l·∫°i."
    
    def handle_date_selection(self, user_input, session_id, appointment_data):
        """Handle date selection step"""
        try:
            import re
            numbers = re.findall(r'\d+', user_input)
            
            if not numbers:
                return "Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c·ªßa ng√†y b·∫°n mu·ªën kh√°m."
            
            date_index = int(numbers[0]) - 1
            date_options = appointment_data.get('date_options', [])
            
            if date_index < 0 or date_index >= len(date_options):
                return f"S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn {len(date_options)}."
            
            selected_date = date_options[date_index]
            doctor_id = appointment_data['selected_doctor']['id']
            
            # Get user token from session
            session_context = self.conversation_context.get(session_id, {})
            user_token = session_context.get('user_token')
            
            # Get available time slots
            time_slots = self.get_available_time_slots(doctor_id, selected_date['date'], user_token)
            
            if not time_slots:
                return f"Xin l·ªói, ng√†y {selected_date['display']} kh√¥ng c√≥ l·ªãch kh√°m tr·ªëng. Vui l√≤ng ch·ªçn ng√†y kh√°c."
            
            # Update appointment data
            self.conversation_context[session_id]['appointment_data']['selected_date'] = selected_date
            self.conversation_context[session_id]['appointment_data']['time_slots'] = time_slots
            self.conversation_context[session_id]['appointment_state'] = self.APPOINTMENT_STATES['SELECTING_TIME']
            
            response = f"Ng√†y kh√°m: {selected_date['display']} ({selected_date['weekday']})\n\n"
            response += "C√°c khung gi·ªù c√≥ s·∫µn:\n\n"
            
            for i, slot in enumerate(time_slots, 1):
                response += f"{i}. {slot['time']}\n"
            
            response += "\nVui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± khung gi·ªù b·∫°n mu·ªën ƒë·∫∑t:"
            
            return response
            
        except Exception as e:
            logger.error(f"Error in date selection: {str(e)}")
            return "ƒê√£ c√≥ l·ªói khi ch·ªçn ng√†y kh√°m. Vui l√≤ng th·ª≠ l·∫°i."
    
    def handle_time_selection(self, user_input, session_id, appointment_data):
        """Handle time slot selection step"""
        try:
            import re
            numbers = re.findall(r'\d+', user_input)
            
            if not numbers:
                return "Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c·ªßa khung gi·ªù b·∫°n mu·ªën ƒë·∫∑t."
            
            time_index = int(numbers[0]) - 1
            time_slots = appointment_data.get('time_slots', [])
            
            if time_index < 0 or time_index >= len(time_slots):
                return f"S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn {len(time_slots)}."
            
            selected_time = time_slots[time_index]
            
            # Update appointment data
            self.conversation_context[session_id]['appointment_data']['selected_time'] = selected_time
            self.conversation_context[session_id]['appointment_state'] = self.APPOINTMENT_STATES['ENTERING_REASON']
            
            response = f"Th·ªùi gian ƒë√£ ch·ªçn: {selected_time['time']}\n\n"
            response += "Vui l√≤ng cho bi·∫øt l√Ω do kh√°m b·ªánh c·ªßa b·∫°n:"
            
            return response
            
        except Exception as e:
            logger.error(f"Error in time selection: {str(e)}")
            return "ƒê√£ c√≥ l·ªói khi ch·ªçn th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i."
    
    def handle_reason_entry(self, user_input, session_id, appointment_data):
        """Handle reason for visit entry"""
        try:
            if len(user_input.strip()) < 5:
                return "Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n l√Ω do kh√°m b·ªánh (√≠t nh·∫•t 5 k√Ω t·ª±)."
            
            # Update appointment data
            self.conversation_context[session_id]['appointment_data']['reason'] = user_input.strip()
            self.conversation_context[session_id]['appointment_state'] = self.APPOINTMENT_STATES['CONFIRMING']
            
            # Show confirmation summary
            doctor = appointment_data['selected_doctor']
            date = appointment_data['selected_date']
            time = appointment_data['selected_time']
            
            response = "üìã TH√îNG TIN ƒê·∫∂T L·ªäCH KH√ÅM\n\n"
            response += f"üë®‚Äç‚öïÔ∏è B√°c sƒ©: BS. {doctor['first_name']} {doctor['last_name']}\n"
            response += f"üìÖ Ng√†y kh√°m: {date['display']} ({date['weekday']})\n"
            response += f"üïê Gi·ªù kh√°m: {time['time']}\n"
            response += f"üìù L√Ω do kh√°m: {user_input.strip()}\n\n"
            response += "B·∫°n c√≥ mu·ªën x√°c nh·∫≠n ƒë·∫∑t l·ªãch n√†y kh√¥ng?\n"
            response += "Tr·∫£ l·ªùi 'c√≥' ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c 'kh√¥ng' ƒë·ªÉ h·ªßy."
            
            return response
            
        except Exception as e:
            logger.error(f"Error in reason entry: {str(e)}")
            return "ƒê√£ c√≥ l·ªói khi nh·∫≠p l√Ω do kh√°m. Vui l√≤ng th·ª≠ l·∫°i."
    
    def handle_confirmation(self, user_input, session_id, appointment_data):
        """Handle appointment confirmation"""
        try:
            cleaned_input = user_input.lower().strip()
            
            if any(word in cleaned_input for word in ['c√≥', 'yes', 'ok', 'ƒë∆∞·ª£c', 'ƒë·ªìng √Ω', 'x√°c nh·∫≠n']):
                # Get user token from session
                session_context = self.conversation_context.get(session_id, {})
                user_token = session_context.get('user_token')
                
                # Confirm and create appointment
                result = self.create_appointment(appointment_data, user_token)
                
                # Reset appointment state
                self.conversation_context[session_id]['appointment_state'] = None
                self.conversation_context[session_id]['appointment_data'] = {}
                
                if result.get('success'):
                    return f"‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng!\n\n{result['message']}\n\nM√£ l·ªãch h·∫πn: {result.get('appointment_id', 'N/A')}"
                else:
                    return f"‚ùå ƒê·∫∑t l·ªãch th·∫•t b·∫°i: {result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}"
            
            elif any(word in cleaned_input for word in ['kh√¥ng', 'no', 'h·ªßy', 'cancel', 't·ª´ ch·ªëi']):
                # Cancel appointment
                self.conversation_context[session_id]['appointment_state'] = None
                self.conversation_context[session_id]['appointment_data'] = {}
                
                return "‚ùå ƒê√£ h·ªßy ƒë·∫∑t l·ªãch kh√°m. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i b·∫±ng c√°ch n√≥i 'ƒë·∫∑t l·ªãch kh√°m'."
            
            else:
                return "Vui l√≤ng tr·∫£ l·ªùi 'c√≥' ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c 'kh√¥ng' ƒë·ªÉ h·ªßy ƒë·∫∑t l·ªãch."
                
        except Exception as e:
            logger.error(f"Error in confirmation: {str(e)}")
            return "ƒê√£ c√≥ l·ªói khi x·ª≠ l√Ω x√°c nh·∫≠n. Vui l√≤ng th·ª≠ l·∫°i."
    
    def get_doctors_list(self, user_token=None):
        """Get list of available doctors from user service"""
        try:
            url = f"{self.user_service_url}/api/users/doctors/"
            headers = self.get_auth_headers(user_token)
            
            # Try direct service call first, fallback to gateway
            try:
                response = requests.get(url, headers=headers, timeout=5)
                logger.info(f"üìû Calling User Service: {url} with headers: {headers}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è User Service call failed: {str(e)}, trying gateway...")
                # Fallback to gateway (uses different endpoint path)
                url = f"{self.gateway_url}/api/doctors/"
                response = requests.get(url, headers=headers, timeout=5)
                logger.info(f"üìû Calling Gateway: {url} with headers: {headers}")
            
            logger.info(f"üì° Response status: {response.status_code}")
            
            if response.status_code == 200:
                doctors_data = response.json()
                logger.info(f"‚úÖ Got {len(doctors_data)} doctors from API")
                
                # Process doctors data - handle both API format and sample format
                processed_doctors = []
                for doctor in doctors_data:
                    if doctor.get('is_active', True):
                        # Handle API format (has username field) vs sample format
                        if 'username' in doctor:
                            # API format
                            processed_doctor = {
                                'id': doctor.get('id'),
                                'first_name': doctor.get('username', '').split('.')[0] if '.' in doctor.get('username', '') else doctor.get('username', 'B√°c sƒ©'),
                                'last_name': doctor.get('username', '').split('.')[1] if '.' in doctor.get('username', '') else '',
                                'specialty': doctor.get('specialty', 'ƒêa khoa'),
                                'is_active': doctor.get('is_active', True)
                            }
                        else:
                            # Sample format
                            processed_doctor = {
                                'id': doctor.get('id'),
                                'first_name': doctor.get('first_name', 'B√°c sƒ©'),
                                'last_name': doctor.get('last_name', ''),
                                'specialty': doctor.get('specialty', 'ƒêa khoa'),
                                'is_active': doctor.get('is_active', True)
                            }
                        
                        processed_doctors.append(processed_doctor)
                
                if processed_doctors:
                    return processed_doctors
                
            # If no doctors from API or API failed, return sample data
            logger.warning("No doctors from API, using sample data")
            return [
                {
                    'id': 1,
                    'first_name': 'Nguy·ªÖn',
                    'last_name': 'VƒÉn An',
                    'specialty': 'Tim m·∫°ch',
                    'is_active': True
                },
                {
                    'id': 2,
                    'first_name': 'Tr·∫ßn',
                    'last_name': 'Th·ªã B√¨nh',
                    'specialty': 'Nhi khoa',
                    'is_active': True
                },
                {
                    'id': 3,
                    'first_name': 'L√™',
                    'last_name': 'VƒÉn C∆∞·ªùng',
                    'specialty': 'ƒêa khoa',
                    'is_active': True
                }
            ]
                
        except Exception as e:
            logger.error(f"Error getting doctors list: {str(e)}")
            # Return sample data for testing
            return [
                {
                    'id': 1,
                    'first_name': 'Nguy·ªÖn',
                    'last_name': 'VƒÉn An',
                    'specialty': 'Tim m·∫°ch',
                    'is_active': True
                },
                {
                    'id': 2,
                    'first_name': 'Tr·∫ßn',
                    'last_name': 'Th·ªã B√¨nh',
                    'specialty': 'Nhi khoa',
                    'is_active': True
                }
            ]
    
    def generate_date_options(self):
        """Generate available date options (next 7 weekdays)"""
        try:
            date_options = []
            current_date = datetime.now()
            days_added = 0
            
            # Generate next 7 weekdays
            while len(date_options) < 7:
                days_added += 1
                next_date = current_date + timedelta(days=days_added)
                
                # Skip weekends (Saturday = 5, Sunday = 6)
                if next_date.weekday() < 5:
                    weekdays = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t']
                    
                    date_options.append({
                        'date': next_date.strftime('%Y-%m-%d'),
                        'display': next_date.strftime('%d/%m/%Y'),
                        'weekday': weekdays[next_date.weekday()]
                    })
            
            return date_options
            
        except Exception as e:
            logger.error(f"Error generating date options: {str(e)}")
            return []
    
    def get_available_time_slots(self, doctor_id, date, user_token=None):
        """Get available time slots for a doctor on a specific date"""
        try:
            url = f"{self.appointment_service_url}/api/appointments/available-slots/"
            params = {
                'doctor_id': doctor_id,
                'date': date
            }
            headers = self.get_auth_headers(user_token)
            
            # Try direct service call first, fallback to gateway
            try:
                response = requests.get(url, params=params, headers=headers, timeout=5)
                logger.info(f"üìû Calling Appointment Service: {url} with params: {params} and headers: {headers}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Appointment Service call failed: {str(e)}, trying gateway...")
                # Fallback to gateway
                url = f"{self.gateway_url}/api/appointments/available-slots/"
                response = requests.get(url, params=params, headers=headers, timeout=5)
                logger.info(f"üìû Calling Gateway: {url} with params: {params} and headers: {headers}")
            
            logger.info(f"üì° Response status: {response.status_code}")
            
            if response.status_code == 200:
                slots = response.json()
                logger.info(f"‚úÖ Got {len(slots)} time slots from API")
                
                # Format time slots
                formatted_slots = []
                for slot in slots:
                    time_str = slot.get('time', '')
                    if time_str:
                        formatted_slots.append({
                            'time': time_str,
                            'slot_id': slot.get('id'),
                            'available': slot.get('available', True)
                        })
                
                # If no slots from API, return sample slots
                if not formatted_slots:
                    logger.warning("No time slots from API, using sample data")
                    formatted_slots = [
                        {'time': '08:00', 'slot_id': f'slot_1_{date}', 'available': True},
                        {'time': '09:00', 'slot_id': f'slot_2_{date}', 'available': True},
                        {'time': '10:00', 'slot_id': f'slot_3_{date}', 'available': True},
                        {'time': '14:00', 'slot_id': f'slot_4_{date}', 'available': True},
                        {'time': '15:00', 'slot_id': f'slot_5_{date}', 'available': True},
                        {'time': '16:00', 'slot_id': f'slot_6_{date}', 'available': True}
                    ]
                
                return formatted_slots
            else:
                logger.error(f"Failed to get time slots: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            logger.error(f"Error getting time slots: {str(e)}")
            # Return sample time slots for testing
            return [
                {'time': '08:00', 'slot_id': f'slot_1_{date}', 'available': True},
                {'time': '09:00', 'slot_id': f'slot_2_{date}', 'available': True},
                {'time': '10:00', 'slot_id': f'slot_3_{date}', 'available': True},
                {'time': '14:00', 'slot_id': f'slot_4_{date}', 'available': True},
                {'time': '15:00', 'slot_id': f'slot_5_{date}', 'available': True}
            ]
    
    def create_appointment(self, appointment_data, user_token=None):
        """Create appointment via API"""
        try:
            doctor = appointment_data['selected_doctor']
            date = appointment_data['selected_date']
            time = appointment_data['selected_time']
            reason = appointment_data['reason']
            
            # Create datetime string
            scheduled_datetime = f"{date['date']}T{time['time']}:00"
            
            url = f"{self.appointment_service_url}/api/appointments/create/"
            data = {
                'doctor_id': doctor['id'],
                'scheduled_time': scheduled_datetime,
                'reason': reason,
                'status': 'PENDING'
                # Note: patient_id will be extracted from user_token by the API
            }
            headers = self.get_auth_headers(user_token)
            
            # Try direct service call first, fallback to gateway
            try:
                response = requests.post(url, json=data, headers=headers, timeout=10)
                logger.info(f"üìû Calling Appointment Service: {url} with data: {data} and headers: {headers}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Appointment Service call failed: {str(e)}, trying gateway...")
                # Fallback to gateway
                url = f"{self.gateway_url}/api/appointments/create/"
                response = requests.post(url, json=data, headers=headers, timeout=10)
                logger.info(f"üìû Calling Gateway: {url} with data: {data} and headers: {headers}")
            
            logger.info(f"üì° Response status: {response.status_code}")
            
            if response.status_code in [200, 201]:
                appointment = response.json()
                appointment_id = appointment.get('id', f'APT{datetime.now().strftime("%Y%m%d%H%M%S")}')
                logger.info(f"‚úÖ Appointment created successfully: {appointment_id}")
                
                return {
                    'success': True,
                    'message': f'ƒê√£ ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng v·ªõi BS. {doctor["first_name"]} {doctor["last_name"]} v√†o {date["display"]} l√∫c {time["time"]}.',
                    'appointment_id': appointment_id,
                    'data': appointment
                }
            else:
                logger.error(f"Failed to create appointment: {response.status_code} - {response.text}")
                return {
                    'success': False,
                    'message': 'Kh√¥ng th·ªÉ t·∫°o l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau.'
                }
                
        except Exception as e:
            logger.error(f"Error creating appointment: {str(e)}")
            # For testing purposes, simulate successful booking
            return {
                'success': True,
                'message': f'ƒê√£ ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng (demo mode)',
                'appointment_id': f'APT{datetime.now().strftime("%Y%m%d%H%M%S")}',
                'data': appointment_data
            }
    
    def generate_service_token(self):
        """Generate a service token for chatbot API calls"""
        try:
            if not JWT_AVAILABLE:
                logger.warning("JWT library not available, skipping token generation")
                return None
                
            # Use the same secret key as other services
            secret_key = os.getenv('SECRET_KEY', 'django-insecure-1234567890abcDEF!@#')
            
            # Create a service user payload
            payload = {
                'user_id': 999,  # Service user ID
                'username': 'chatbot_service',
                'email': 'chatbot@healthcare.local',
                'first_name': 'Chatbot',
                'last_name': 'Service',
                'role': 'SERVICE',
                'is_staff': True,
                'is_superuser': False,
                'exp': datetime.utcnow() + timedelta(days=365),  # Long-lived token for service
                'iat': datetime.utcnow()
            }
            
            token = jwt.encode(payload, secret_key, algorithm='HS256')
            logger.info("üîë Service token generated successfully")
            return token
            
        except Exception as e:
            logger.error(f"‚ùå Error generating service token: {str(e)}")
            return None

    def get_auth_headers(self, user_token=None):
        """Get authentication headers for API calls"""
        if user_token:
            # Use real user token if provided
            return {'Authorization': f'Bearer {user_token}'}
        elif self.service_token:
            # Fallback to service token for internal operations
            return {'Authorization': f'Bearer {self.service_token}'}
        return {}

# Create instance for backward compatibility
def create_chatbot():
    return SimpleTrainedHealthcareChatBot()
