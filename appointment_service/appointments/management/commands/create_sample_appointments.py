from django.core.management.base import BaseCommand
from django.db import models
from appointments.models import DoctorSchedule, AppointmentSlot, Appointment
import requests
import json
from datetime import datetime, timedelta, time, date
import random
from django.utils import timezone


class Command(BaseCommand):
    help = 'T·∫°o l·ªãch l√†m vi·ªác cho b√°c sƒ© v√† d·ªØ li·ªáu m·∫´u l·ªãch kh√°m'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='S·ªë ng√†y t·∫°o l·ªãch t·ª´ h√¥m nay'
        )
        parser.add_argument(
            '--appointments',
            type=int,
            default=100,
            help='S·ªë l∆∞·ª£ng l·ªãch kh√°m m·∫´u'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='X√≥a t·∫•t c·∫£ d·ªØ li·ªáu l·ªãch c≈©'
        )

    def handle(self, *args, **options):
        if options['clear']:
            self.stdout.write('üóëÔ∏è  X√≥a d·ªØ li·ªáu l·ªãch c≈©...')
            Appointment.objects.all().delete()
            AppointmentSlot.objects.all().delete()
            DoctorSchedule.objects.all().delete()

        # L·∫•y danh s√°ch b√°c sƒ© t·ª´ user service
        doctors = self.get_doctors_from_user_service()
        
        if not doctors:
            self.stdout.write(
                self.style.ERROR('‚ùå Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o. Vui l√≤ng ch·∫°y create_sample_users tr∆∞·ªõc.')
            )
            return

        # T·∫°o l·ªãch l√†m vi·ªác cho b√°c sƒ©
        self.create_doctor_schedules(doctors)
        
        # T·∫°o appointment slots
        self.create_appointment_slots(doctors, options['days'])
        
        # T·∫°o l·ªãch kh√°m m·∫´u
        self.create_sample_appointments(options['appointments'])
        
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ T·∫°o th√†nh c√¥ng l·ªãch l√†m vi·ªác cho {len(doctors)} b√°c sƒ© v√† {options["appointments"]} l·ªãch kh√°m m·∫´u'
            )
        )

    def get_doctors_from_user_service(self):
        """L·∫•y danh s√°ch b√°c sƒ© t·ª´ user service"""
        try:
            # Th·ª≠ k·∫øt n·ªëi ƒë·∫øn user service
            response = requests.get(
                'http://localhost:8001/api/users/doctors/list/',
                timeout=5
            )
            if response.status_code == 200:
                return response.json()
            else:
                self.stdout.write('‚ö†Ô∏è  Kh√¥ng th·ªÉ k·∫øt n·ªëi user service, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...')
                # Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
                return self.get_sample_doctors()
        except requests.exceptions.RequestException:
            self.stdout.write('‚ö†Ô∏è  User service ch∆∞a kh·ªüi ƒë·ªông, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...')
            return self.get_sample_doctors()

    def get_sample_doctors(self):
        """T·∫°o d·ªØ li·ªáu b√°c sƒ© m·∫´u n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c user service"""
        return [
            {'id': i, 'full_name': f'B√°c sƒ© {i}', 'specialty': 'N·ªôi khoa'}
            for i in range(1, 11)
        ]

    def create_doctor_schedules(self, doctors):
        """T·∫°o l·ªãch l√†m vi·ªác cho b√°c sƒ©"""
        schedules_data = [
            # Th·ª© 2-6: 8:00-12:00, 14:00-17:00
            {'weekday': 0, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 2 s√°ng
            {'weekday': 0, 'start_time': time(14, 0), 'end_time': time(17, 0)},  # Th·ª© 2 chi·ªÅu
            {'weekday': 1, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 3 s√°ng
            {'weekday': 1, 'start_time': time(14, 0), 'end_time': time(17, 0)},  # Th·ª© 3 chi·ªÅu
            {'weekday': 2, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 4 s√°ng
            {'weekday': 2, 'start_time': time(14, 0), 'end_time': time(17, 0)},  # Th·ª© 4 chi·ªÅu
            {'weekday': 3, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 5 s√°ng
            {'weekday': 3, 'start_time': time(14, 0), 'end_time': time(17, 0)},  # Th·ª© 5 chi·ªÅu
            {'weekday': 4, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 6 s√°ng
            {'weekday': 4, 'start_time': time(14, 0), 'end_time': time(17, 0)},  # Th·ª© 6 chi·ªÅu
            # Th·ª© 7: 8:00-12:00
            {'weekday': 5, 'start_time': time(8, 0), 'end_time': time(12, 0)},   # Th·ª© 7 s√°ng
        ]

        for doctor in doctors:
            doctor_id = doctor['id']
            
            # T·∫°o l·ªãch l√†m vi·ªác cho m·ªói b√°c sƒ©
            for schedule in schedules_data:
                # M·ªôt s·ªë b√°c sƒ© c√≥ th·ªÉ kh√¥ng l√†m vi·ªác v√†o m·ªôt s·ªë ng√†y
                if random.random() < 0.9:  # 90% kh·∫£ nƒÉng c√≥ l·ªãch
                    DoctorSchedule.objects.get_or_create(
                        doctor_id=doctor_id,
                        weekday=schedule['weekday'],
                        start_time=schedule['start_time'],
                        defaults={
                            'end_time': schedule['end_time'],
                            'is_active': True,
                            'max_patients_per_hour': random.randint(3, 6),
                            'appointment_duration': 30
                        }
                    )

        self.stdout.write(f'üìÖ T·∫°o l·ªãch l√†m vi·ªác cho {len(doctors)} b√°c sƒ©')

    def create_appointment_slots(self, doctors, days):
        """T·∫°o c√°c slot kh√°m b·ªánh d·ª±a tr√™n l·ªãch l√†m vi·ªác"""
        current_date = date.today()
        
        for day_offset in range(days):
            check_date = current_date + timedelta(days=day_offset)
            weekday = check_date.weekday()  # 0 = Monday
            
            # L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa c√°c b√°c sƒ© trong ng√†y n√†y
            schedules = DoctorSchedule.objects.filter(weekday=weekday, is_active=True)
            
            for schedule in schedules:
                # T·∫°o slots 30 ph√∫t cho m·ªói khung gi·ªù l√†m vi·ªác
                current_time = schedule.start_time
                end_time = schedule.end_time
                
                while current_time < end_time:
                    slot_end_time = (
                        datetime.combine(date.today(), current_time) + 
                        timedelta(minutes=schedule.appointment_duration)
                    ).time()
                    
                    if slot_end_time <= end_time:
                        AppointmentSlot.objects.get_or_create(
                            doctor_id=schedule.doctor_id,
                            date=check_date,
                            start_time=current_time,
                            defaults={
                                'end_time': slot_end_time,
                                'max_appointments': 1,  # 1 b·ªánh nh√¢n m·ªói slot
                                'booked_count': 0
                            }
                        )
                    
                    # Chuy·ªÉn sang slot ti·∫øp theo
                    current_time = slot_end_time

        self.stdout.write(f'üïê T·∫°o appointment slots cho {days} ng√†y')

    def create_sample_appointments(self, count):
        """T·∫°o l·ªãch kh√°m m·∫´u"""
        # L·∫•y danh s√°ch b√°c sƒ© v√† patients
        doctors = self.get_doctors_from_user_service()
        patients = self.get_patients_from_user_service()
        
        if not patients:
            self.stdout.write('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n, t·∫°o d·ªØ li·ªáu m·∫´u...')
            patients = [{'id': i, 'full_name': f'B·ªánh nh√¢n {i}'} for i in range(1, 51)]
        
        # L·∫•y c√°c slot c√≥ s·∫µn
        available_slots = AppointmentSlot.objects.filter(
            date__gte=date.today(),
            booked_count__lt=models.F('max_appointments')
        )
        
        if not available_slots.exists():
            self.stdout.write('‚ùå Kh√¥ng c√≥ slot n√†o available')
            return

        statuses = ['PENDING', 'CONFIRMED', 'COMPLETED']
        reasons = [
            'Kh√°m t·ªïng qu√°t',
            'ƒêau ƒë·∫ßu th∆∞·ªùng xuy√™n',
            'Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥',
            'ƒêau b·ª•ng',
            'Ho k√©o d√†i',
            'Kh√°m thai',
            'Ti√™m ch·ªßng',
            'T√°i kh√°m',
            'ƒêau l∆∞ng',
            'Ki·ªÉm tra huy·∫øt √°p'
        ]

        appointments_created = 0
        for i in range(count):
            if appointments_created >= count:
                break
                
            # Ch·ªçn ng·∫´u nhi√™n slot, patient, doctor
            slot = random.choice(available_slots)
            patient = random.choice(patients)
            
            # T√¨m th√¥ng tin b√°c sƒ©
            doctor = next((d for d in doctors if d['id'] == slot.doctor_id), None)
            if not doctor:
                continue
            
            # T·∫°o datetime t·ª´ slot
            scheduled_datetime = timezone.make_aware(
                datetime.combine(slot.date, slot.start_time)
            )
            
            # T·∫°o appointment
            appointment = Appointment.objects.create(
                patient_id=patient['id'],
                doctor_id=slot.doctor_id,
                scheduled_time=scheduled_datetime,
                end_time=scheduled_datetime + timedelta(minutes=30),
                status=random.choice(statuses),
                reason=random.choice(reasons),
                priority=random.randint(1, 3),
                patient_name=patient['full_name'],
                doctor_name=doctor['full_name'],
                department=doctor.get('specialty', 'N·ªôi khoa'),
                appointment_slot=slot,
                notes=f'L·ªãch kh√°m m·∫´u s·ªë {i+1}'
            )
            
            appointments_created += 1
            
            # C·∫≠p nh·∫≠t slot
            slot.booked_count += 1
            slot.save()
            
            # N·∫øu slot ƒë√£ full, remove kh·ªèi available_slots
            if slot.booked_count >= slot.max_appointments:
                available_slots = available_slots.exclude(id=slot.id)
                if not available_slots.exists():
                    break

        self.stdout.write(f'üìã T·∫°o {appointments_created} l·ªãch kh√°m m·∫´u')

    def get_patients_from_user_service(self):
        """L·∫•y danh s√°ch b·ªánh nh√¢n t·ª´ user service"""
        try:
            response = requests.get(
                'http://localhost:8001/api/users/patients/list/',
                timeout=5
            )
            if response.status_code == 200:
                return response.json()
        except requests.exceptions.RequestException:
            pass
        return None
